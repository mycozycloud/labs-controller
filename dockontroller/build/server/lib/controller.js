// Generated by CoffeeScript 1.7.1
var Docker, DockerCommander, logrotate;

Docker = require('dockerode');

logrotate = require('logrotate-stream');

module.exports = DockerCommander = (function() {
  DockerCommander.prototype.socketPath = process.env.DOCKERSOCK || '/var/run/docker.sock';

  DockerCommander.prototype.version = 'v1.10';

  function DockerCommander() {
    this.docker = new Docker({
      socketPath: this.socketPath,
      version: this.version
    });
  }

  DockerCommander.prototype.installApplication = function(imagename, version, params, callback) {
    var options;
    options = {
      fromImage: imagename,
      tag: version
    };
    return this.docker.createImage(options, (function(_this) {
      return function(err, data) {
        var slug;
        if (err) {
          return callback(err);
        }
        slug = imagename.split('/').slice(-1);
        options = {
          'name': slug,
          'Image': imagename,
          'Tty': false,
          'Env': params.env
        };
        return _this.docker.createContainer(options, callback);
      };
    })(this));
  };

  DockerCommander.prototype.uninstallApplication = function(slug, callback) {
    var container;
    container = this.docker.getContainer(slug);
    return this.stop(slug, function(err, image) {
      if (err) {
        return callback(err);
      }
      return container.remove(callback);
    });
  };

  DockerCommander.prototype.start = function(slug, params, callback) {
    var container, logStream, logfile, singlepipe;
    container = this.docker.getContainer(slug);
    logfile = "/var/log/cozy_" + slug + ".log";
    logStream = logrotate({
      file: logfile,
      size: '100k',
      keep: 3
    });
    singlepipe = {
      stream: true,
      stdout: true,
      stderr: true
    };
    return container.attach(singlepipe, function(err, stream) {
      var startOptions;
      if (err) {
        return callback(err);
      }
      stream.setEncoding('utf8');
      stream.pipe(logStream, {
        end: true
      });
      startOptions = {
        'Links': params.Links || []
      };
      return container.start(startOptions, callback);
    });
  };

  DockerCommander.prototype.stop = function(slug, callback) {
    var container;
    container = this.docker.getContainer(slug);
    return container.inspect(function(err, data) {
      var image;
      if (err) {
        return callback(err);
      }
      image = data.Image;
      if (!data.State.Running) {
        return callback(null, image);
      }
      return container.stop(function(err) {
        if (err) {
          return callback(err);
        }
        return callback(null, image);
      });
    });
  };

  DockerCommander.prototype.startCouch = function(callback) {
    return this.start('couchdb', {}, callback);
  };

  DockerCommander.prototype.startDataSystem = function(callback) {
    return this.start('datasystem', {
      Links: ['couchdb:couch']
    }, callback);
  };

  DockerCommander.prototype.startApplication = function(slug, callback) {
    return this.start(slug, {
      Links: ['datasystem:datasystem']
    }, callback);
  };

  DockerCommander.prototype.exist = function(slug) {
    return true;
  };

  return DockerCommander;

})();
